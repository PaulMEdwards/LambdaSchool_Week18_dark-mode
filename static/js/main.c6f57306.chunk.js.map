{"version":3,"sources":["components/Chart.jsx","components/Charts.jsx","hooks/useDark.jsx","hooks/useLocalStorage.jsx","components/Navbar.jsx","index.js"],"names":["Chart","_ref","sparklineData","formattedData","map","price","idx","timeToSubtract","value","date","moment","subtract","format","length","filter","data","react_default","a","createElement","es6","width","height","type","dataKey","stroke","strokeDasharray","interval","Charts","coinData","className","coin","key","name","symbol","src","image","alt","components_Chart","sparkline_in_7d","useDark","initialValue","_useLocalStorage","_useState","useState","item","window","localStorage","getItem","JSON","parse","_useState2","Object","slicedToArray","storedValue","setStoredValue","setItem","stringify","useLocalStorage","_useLocalStorage2","darkValue","setDarkValue","useEffect","dC","document","body","classList","add","remove","updatedValue","Navbar","_useDark","_useDark2","darkMode","setDarkMode","onClick","e","preventDefault","rootElement","getElementById","ReactDOM","render","setCoinData","axios","get","then","res","catch","err","console","log","components_Navbar","components_Charts"],"mappings":"qPAuCeA,EA5BD,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,cACTC,EAAgBD,EACnBE,IAAI,SAACC,EAAOC,GACX,GAAIA,EAAM,IAAM,EAAG,CACjB,IAAMC,EAAiB,IAAMD,EAI7B,MAAO,CAAEE,MAAOH,EAAOI,KAHVC,MACVC,SAASJ,EAAgB,SACzBK,OAAO,cAEL,OAAIN,IAAQJ,EAAcW,OAAS,EAEjC,CAAEL,MAAOH,EAAOI,KADVC,MAASE,OAAO,cAGxB,OAERE,OAAO,SAAAC,GAAI,OAAIA,IAElB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,MAAO,KAAMC,OAAQ,IAAKN,KAAMZ,GACzCa,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMG,KAAK,WAAWC,QAAQ,QAAQC,OAAO,YAC7CR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeK,OAAO,OAAOC,gBAAgB,QAC7CT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOI,QAAQ,OAAOG,SAAU,IAChCV,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,QCfSQ,EAhBA,SAAA1B,GAAkB,IAAf2B,EAAe3B,EAAf2B,SAChB,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UACZD,EAASxB,IAAI,SAAA0B,GAAI,OAChBd,EAAAC,EAAAC,cAAA,OAAKW,UAAU,mBAAmBE,IAAKD,EAAKE,MAC1ChB,EAAAC,EAAAC,cAAA,MAAIW,UAAU,eAAeC,EAAKE,MAClChB,EAAAC,EAAAC,cAAA,MAAIW,UAAU,gBAAgBC,EAAKG,QACnCjB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,cACbb,EAAAC,EAAAC,cAAA,OAAKgB,IAAKJ,EAAKK,MAAOd,OAAO,KAAKe,IAAKN,EAAKE,QAE9ChB,EAAAC,EAAAC,cAACmB,EAAD,CAAOnC,cAAe4B,EAAKQ,gBAAgBjC,aCVxCkC,EAAU,SAACC,GAAiB,IAAAC,ECDV,SAACV,EAAKS,GAAiB,IAAAE,EACdC,mBAAS,WAC7C,IAAMC,EAAOC,OAAOC,aAAaC,QAAQhB,GACzC,OAAOa,EAAOI,KAAKC,MAAML,GAAQJ,IAHiBU,EAAAC,OAAAC,EAAA,EAAAD,CAAAT,EAAA,GAC7CW,EAD6CH,EAAA,GAChCI,EADgCJ,EAAA,GAUpD,MAAO,CAACG,EALS,SAAC7C,GAChB8C,EAAe9C,GACfqC,OAAOC,aAAaS,QAAQxB,EAAKiB,KAAKQ,UAAUhD,MDLhBiD,CAAgB,WAAYjB,GADvBkB,EAAAP,OAAAC,EAAA,EAAAD,CAAAV,EAAA,GAChCkB,EADgCD,EAAA,GACrBE,EADqBF,EAAA,GASvC,OALAG,oBAAU,WACR,IAAIC,EAAKC,SAASC,KAAKC,WACT,IAAdN,EAAqBG,EAAGI,IAAI,aAAeJ,EAAGK,OAAO,cACpD,CAACR,IAEG,CAACA,EAAWC,EAPM,SAACQ,GAAD,OAAkBR,EAAaQ,MEoB3CC,EAtBA,WAAM,IAAAC,EACa/B,GAAQ,GADrBgC,EAAApB,OAAAC,EAAA,EAAAD,CAAAmB,EAAA,GACZE,EADYD,EAAA,GACFE,EADEF,EAAA,GAOnB,OACEvD,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UACbb,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OACEW,UAAU,oBACV6C,QAVa,SAACC,GAClBA,EAAEC,iBACFH,GAAaD,KAUTxD,EAAAC,EAAAC,cAAA,OACEW,UAAW2C,EAAW,iBAAmB,cCU7CK,UAAcd,SAASe,eAAe,SAC5CC,IAASC,OAAOhE,EAAAC,EAAAC,cApBJ,WAAM,IAAAwB,EACgBC,mBAAS,IADzBO,EAAAC,OAAAC,EAAA,EAAAD,CAAAT,EAAA,GACTd,EADSsB,EAAA,GACC+B,EADD/B,EAAA,GAWhB,OARAW,oBAAU,WACRqB,IACGC,IACC,0HAEDC,KAAK,SAAAC,GAAG,OAAIJ,EAAYI,EAAItE,QAC5BuE,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAC3B,IAEDvE,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAACwE,EAAD,MACA1E,EAAAC,EAAAC,cAACyE,EAAD,CAAQ/D,SAAUA,MAMR,MAASiD","file":"static/js/main.c6f57306.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip\n} from \"recharts\";\n\nconst Chart = ({ sparklineData }) => {\n  const formattedData = sparklineData\n    .map((price, idx) => {\n      if (idx % 6 === 0) {\n        const timeToSubtract = 168 - idx;\n        const date = moment()\n          .subtract(timeToSubtract, \"hours\")\n          .format(\"ddd h:mma\");\n        return { value: price, date };\n      } else if (idx === sparklineData.length - 1) {\n        const date = moment().format(\"ddd h:mma\");\n        return { value: price, date };\n      }\n      return null;\n    })\n    .filter(data => data);\n\n  return (\n    <LineChart width={1100} height={300} data={formattedData}>\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n      <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n      <XAxis dataKey=\"date\" interval={3} />\n      <YAxis />\n      <Tooltip />\n    </LineChart>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport Chart from \"./Chart\";\n\nconst Charts = ({ coinData }) => {\n  return (\n    <div className=\"charts\">\n      {coinData.map(coin => (\n        <div className=\"chart__container\" key={coin.name}>\n          <h2 className=\"coin__title\">{coin.name}</h2>\n          <h4 className=\"coin__symbol\">{coin.symbol}</h4>\n          <div className=\"coin__logo\">\n            <img src={coin.image} height=\"40\" alt={coin.name} />\n          </div>\n          <Chart sparklineData={coin.sparkline_in_7d.price} />\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default Charts;\n","import { useLocalStorage } from \"./useLocalStorage\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport const useDark = (initialValue) => {\r\n  const [darkValue, setDarkValue] = useLocalStorage(\"darkMode\", initialValue);\r\n  const handleChangeDark = (updatedValue) => setDarkValue(updatedValue);\r\n\r\n  useEffect(() => {\r\n    let dC = document.body.classList;\r\n    darkValue === true ? dC.add('dark-mode') : dC.remove('dark-mode');\r\n  }, [darkValue]);\r\n\r\n  return [darkValue, setDarkValue, handleChangeDark];\r\n};","import { useState } from \"react\";\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    const item = window.localStorage.getItem(key);\r\n    return item ? JSON.parse(item) : initialValue;\r\n  });\r\n  const setValue = (value) => {\r\n    setStoredValue(value);\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};","import React, { useState } from 'react';\nimport { useDark } from \"../hooks/useDark\";\n\nconst Navbar = () => {\n  const [darkMode, setDarkMode] = useDark(false);\n  const toggleMode = (e) => {\n    e.preventDefault();\n    setDarkMode(!darkMode);\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <h1>Crypto Tracker</h1>\n      <div\n        className=\"dark-mode__toggle\"\n        onClick={toggleMode}\n        >\n        <div\n          className={darkMode ? 'toggle toggled' : 'toggle'}\n        />\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\n\nimport Charts from \"./components/Charts\";\nimport Navbar from \"./components/Navbar\";\n\nimport \"./styles.scss\";\n\nconst App = () => {\n  const [coinData, setCoinData] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\n        \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=true\"\n      )\n      .then(res => setCoinData(res.data))\n      .catch(err => console.log(err));\n  }, []);\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Charts coinData={coinData} />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}